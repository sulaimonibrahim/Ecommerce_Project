version: '3'

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1

  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://sulaimonibrahim:Ladi_555@ecommerce_project-airflow-postgres-1:5435/ecommerce
    AIRFLOW_CONN_SOURCE_POSTGRES: postgresql+psycopg2://sulaimonibrahim:Ladi_555@ecommerce_project-source-postgres-1:5435/ecommerce
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://sulaimonibrahim:Ladi_555@ecommerce_project-airflow-postgres-1:5435/ecommerce
    AIRFLOW__CELERY__BROKER_URL: redis://:Ladi_1212@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: yu3Q8UqlWYVvV-IM9i44EoOSaLhc1c3CrDhVe5VTIqE=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__TEST_CONNECTION: Enabled
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: |
      apache-airflow[google]
      apache-airflow-providers-google
      apache-airflow-providers-postgres
      psycopg2-binary
      apache-airflow-providers-common-sql
      PyYAML
      google-cloud-storage==2.10.0
      google-cloud-bigquery==3.11.4
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config

  user: "${AIRFLOW_UID:-50000}:0"

  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  # airflow postgres db
  airflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: sulaimonibrahim
      POSTGRES_PASSWORD: Ladi_555
      POSTGRES_DB: ecommerce
    volumes:
      - ./airflow/airflow_pg_data:/var/lib/postgresql/data
    ports:
      - '5435:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "sulaimonibrahim"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  # source database for ingestion
  source-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: sulaimonibrahim
      POSTGRES_PASSWORD: Ladi_555
    volumes:
      - ./pg/source_pg_data:/var/lib/postgresql/src_db/data
      - ./pg/data:/data
      - ./pg/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5436:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sulaimonibrahim -d ecommerce"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    command: redis-server --requirepass Ladi_1212
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Ladi_1212", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    environment:
      - REDIS_PASSWORD=Ladi_1212

  # web server
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # airflow workers
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  #initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to get Airflow running with less requirements."
          echo
        fi
        airflow db init
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
    depends_on:
      <<: *airflow-common-depends-on

  flower:
    image: apache/airflow:2.7.1
    command: celery flower
    ports:
      - "5555:5555"
    environment:
      <<: *airflow-common-env
    depends_on:
      <<: *airflow-common-depends-on
